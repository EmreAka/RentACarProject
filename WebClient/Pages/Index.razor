@page "/"
@using RentACarBlazorServer.Models
@using WebClient.Services
@inject HttpClient httpClient
@inject NavigationManager NavigationManager

<PageTitle>Rent A Car</PageTitle>


<div class="container">

    @if (Brands != null && Colours != null)
    {
        <MudFab OnClick="@NavigateToAddCar" StartIcon="@Icons.Filled.Add" Label="Rent Your Car" Size="Size.Large"
        Style="width: 12rem; position: fixed; bottom: 10px; right: 10px; z-index: 1231;" Color="Color.Secondary" />

        <div class="car-filter">
            <MudText Typo="Typo.h4">Brands</MudText>
            <MudPaper Width="300px" style="margin-top: 1rem; overflow-y: scroll; height: 30vh">
                <MudList Clickable="true" @bind-SelectedValue="@SelectedBrandId">
                    <MudListItem Text="All Brands" />
                    @foreach (var brand in Brands)
                    {
                        <MudListItem Text="@brand.Name" Value="@brand.Id" />
                    }
                </MudList>
            </MudPaper>

            <MudText Typo="Typo.h4" Style="margin-top: 1rem">Colours</MudText>
            <MudPaper Width="300px" style="margin-top: 1rem; overflow-y: scroll; height: 30vh">
                <MudList Clickable="true" @bind-SelectedValue="SelectedColourId">
                    <MudListItem Text="All Colours" />
                    @foreach (var colour in Colours)
                    {
                        <MudListItem Text="@colour.Name" Value="@colour.Id" />
                    }
                </MudList>
            </MudPaper>

            <MudButton Variant="Variant.Filled" Color="Color.Secondary"
            Style="width: 100%; margin-top: 1rem; margin-bottom: 1rem" @onclick="FilterCars">Filter</MudButton>
        </div>

    }
    <div style="width: 100%; display: flex; justify-content:center; flex-direction:column">

        @if (CarDetails == null)
        {
            <MudProgressLinear Color="Color.Secondary" Indeterminate="true" Class="my-7" />
        }

        @if (CarDetails != null)
        {
            <div class="title">
                <MudText Typo="Typo.h4" Style="text-align:center">Rentals</MudText>
            </div>

            if (!string.IsNullOrEmpty(FilterText))
            {
                @FilterText
            }
            <div class="car-list">
                @for (var j = 0; j < CarDetails.Count(); j++)
                {
                    var i = j;
                    <div class="car-card">
                        <MudCard>
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h5">@CarDetails[i].BrandName</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardMedia Image="@CarDetails[i].Images[0]" Style="width: 100%" Height="250" />
                            <MudCardContent>
                                <MudText Typo="Typo.body2" Style="overflow-y: auto; max-height: 1.3rem">@CarDetails[i].Description
                                </MudText>
                            </MudCardContent>
                            <MudCardActions Style="justify-content: space-between">
                                <MudIconButton @onclick="() => AddToFavorites(CarDetails[i])" Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
                                <button class="learn-more" @onclick="() => NavigateToCarDetails(CarDetails[i].Id)">
                                    <span class="circle" aria-hidden="true">
                                        <span class="icon arrow"></span>
                                    </span>
                                    <span class="button-text">Learn More</span>
                                </button>
                            </MudCardActions>
                        </MudCard>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    public List<CarDetailDto>? CarDetails { get; set; }
    public List<Brand>? Brands { get; set; }
    public List<Colour>? Colours { get; set; }
    public int IndexValue { get; set; } = 0;

    MudListItem? selectedItem;

    public string FilterText { get; set; }

    public object? SelectedBrandId { get; set; }
    public object? SelectedColourId { get; set; }

    [Inject]
    private CarService _carService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var cars = await httpClient.GetFromJsonAsync<ListResponse<CarDetailDto>>("Cars/getcardetails");
        CarDetails = cars?.Data;

        var brands = await httpClient.GetFromJsonAsync<ListResponse<Brand>>("Brands/getall");
        Brands = brands?.Data?.OrderBy(b => b.Name).ToList();

        var colours = await httpClient.GetFromJsonAsync<ListResponse<Colour>>("Colours/getall");
        Colours = colours?.Data?.OrderBy(c => c.Name).ToList();
    }

    private void NavigateToCarDetails(int carId)
    {
        NavigationManager.NavigateTo($"car/{carId}");
    }

    private void NavigateToAddCar()
    {
        NavigationManager.NavigateTo("caradd");
    }

    private void AddToFavorites(CarDetailDto carDetailDto){
        Console.WriteLine(carDetailDto.Id);
    }

    private async Task FilterCars()
    {
        if (SelectedBrandId != null && SelectedColourId == null)
        {
            var result = await _carService.GetCarDetailsByBrandId((int)SelectedBrandId);
            CarDetails = result?.Data;
        }

        else if (SelectedColourId != null && SelectedBrandId == null)
        {
            var result = await _carService.GetCarDetailsByColourId((int)SelectedColourId);
            CarDetails = result?.Data;
        }

        else if (SelectedBrandId != null && SelectedColourId != null)
        {
            var result = await _carService.GetCarDetailsByBrandIdAndColourId((int)SelectedBrandId, (int)SelectedColourId);
            CarDetails = result?.Data;
        }

        else
        {
            var cars = await _carService.GetCarDetails();
            CarDetails = cars?.Data;
        }
    }
}